#!/usr/bin/env ruby
# coding: utf-8

require "thor"
require "csv"
require "uri"
require 'ostruct'

class RedirectConfig < Thor

  desc "apache_from_csv HOSTNAME <CSVFILE",
       <<-EOT
Creates RewriteRules for Apache web server from given CSVFILE.
CSVFILE has to have the following columns: TARGET_URI, STATUSCODE,
DESTINATION_URI All rows from CSVFILE will be read but all not
TARGET_URI matching HOSTNAME and Statuscode not matching 301 will be
ignored.
       EOT
  def apache_from_csv(hostname)
    line_no = 0
    
    CSV($stdin, headers: false).each do |in_row|
      line_no += 1

      target, statuscode, destination = in_row

      next unless statuscode == "301" 
      next unless /^http/.match target
      
      target_uri = URI(target)
      next unless target_uri.host == hostname
      
      pattern = Regexp.escape("#{target_uri.path}")
      query =  Regexp.escape("#{target_uri.query}") if target_uri.query
      
      puts "RewriteCond\t\%\{QUERY_STRING\}\t^#{query}$" if query
      puts "RewriteRule\t^#{pattern}$\t#{destination}\t[r=301,nc,ne,l]\t# from Redirect Master line #{line_no}"
    end
  end

  desc "csv_to_apache <CSVFILE",
       <<-EOT
Creates RewriteRules for Apache web server from given CSVFILE as complementary to apache_to_csv.
       EOT
  def csv_to_apache
    line_no = 0
    
    CSV($stdin, headers: true).each do |in_row|
      line_no += 1

      pattern = in_row['Pattern']
      destination = in_row['Destination']
      r = in_row['R']
      l = in_row['L']
      nc = in_row['NC']
      ne = in_row['NE']
      re = in_row['RE']
      condition = in_row['Condition']

      # r=301,nc,ne,l
      f = []
      f << "r=#{r}" if r
      f << "ne" if ne
      f << "nc" if nc
      f << "l" if l
      flags = "[#{f.join(',')}]" unless f.empty?

      pattern = "^#{Regexp.escape(pattern)}$" unless re
      
      puts "RewriteCond\t#{condition.gsub(/ +/, "\t")}" unless cond.empty? # FIX gsub ist nur ein Hack fÃ¼r's diff
      puts "RewriteRule\t#{pattern}\t#{destination}\t#{flags}" #\t# from Redirect Master line #{line_no}"
    end
  end

  desc "apache_to_csv <APACHE_CONFFILE >CSVFILE",
       <<-EOT
Reads APACHE_CONFFILE as a RewriteRules file for Apache web and creates a CSVFILE from it's content.
       EOT
  def apache_to_csv
    line_no = 0

    cond_pattern = /RewriteCond\s+(.+)/
    rule_pattern = /RewriteRule\s+([^\s]+)\s+([^\s]+)\s*(\[.*\])?/
    comment_pattern = /^\s*#(.+)/

    last_condition = '' # FIX should be an array
    
    CSV do |csv|

      csv << %w(Pattern Destination RE NC NE L R Condition)
      
      $stdin.readlines.each do |line|
        line_no += 1

        line.strip!

        next if line.empty? || line.match(comment_pattern)

        if c = line[cond_pattern, 1]
          last_condition = c
          next
        end

        pattern = line[rule_pattern, 1]
        warn "Pattern missing in non-empty line #{line_no}" if !pattern && !line.empty?
        
        destination = line[rule_pattern, 2]
        warn "Destination missing in line #{line_no}" unless destination

        case flags = line[rule_pattern, 3]
        when '[redirect=301,nocase,last]'
          r = 301
          nc = true
          l = true          
        when '[R=301,NC,l]'
          r = 301
          nc = true
          l = true
        when '[R=301,NC]'
          r = 301
          nc = true
        when '[r=301,nc,l]'
          r = 301
          nc = true
          l = true
        when '[r=301,l]'
          r = 301
          l = true
        when '[r=301,l,nc]'
          r = 301
          nc = true
          l = true
        when '[r=301,nc,ne,l]'
          r = 301
          nc = true
          ne = true
          l = true          
        when '[R=301,NC,NE,l]'
          r = 301
          nc = true
          ne = true
          l = true          
        when '[R=301,NE,NC,l]'
          r = 301
          nc = true
          ne = true
          l = true
        when '[r=301,NC,NE,l]'
          r = 301
          nc = true
          ne = true
          l = true
        when '[redirect=301,nocase,noescape,last]'
          r = 301
          nc = true
          ne = true
          l = true          
        else
          warn "unknown flags '#{flags}' found in line #{line_no}"
        end
        
        if /[\[\]\(\)\|\?]/.match(pattern)
          re = true
        elsif /^[^\^].*\$$/.match(pattern)
          re = true
        elsif /^\^.*[^\$]$/.match(pattern)
          re = true
        else
          pattern.gsub!(/^\^/, '')
          pattern.gsub!(/\$$/, '')
          pattern.gsub!(/\\/, '')
        end

        # Pattern Destination RE NC L R Condition
        csv << [pattern, destination, re, nc, ne, l, r, last_condition]

        last_condition = '' # clear condition accu after every rule
      end
    end
  end

  desc "find_duplicates <APACHE_CONFFILE",
       <<-EOT
Reads APACHE_CONFFILE and reads all lines with RewriteRule statements.
Extracts the Pattern argument (this is the first argument to
RewriteRule). Finds an prints all lines with duplicated Pattern.
       EOT
  def find_duplicates
    line_no = 0
    rules_by_target = Hash.new

    rule_pattern = /\s*RewriteRule\s+([^\s]+)\s+([^\s]+)(.*# from Redirect Master line ([0-9]+))?/
    
    $stdin.readlines.each do |rule|
      line_no += 1
      
      next if /^#/.match rule 
      next unless target = rule[rule_pattern, 1]
      destination = rule[rule_pattern, 2]
      orig_line_no = rule[rule_pattern, 4]

      unless previous_rule = rules_by_target[target]
        rules_by_target[target] = OpenStruct.new
        rules_by_target[target].line_no = line_no
        rules_by_target[target].orig_line_no = orig_line_no
        rules_by_target[target].destination = destination
        next
      end

      from_line_no = if orig_line_no
                       "original line #{orig_line_no}"
                     else
                       "config line #{line_no}"
                     end
      
      previusly_line_no = if previous_rule.orig_line_no
                            "original line #{previous_rule.orig_line_no}"
                          else
                            "config line #{previous_rule.line_no}"
                          end
      
      puts "Line #{line_no}: From #{from_line_no}: #{target} previously seen in #{previusly_line_no}"
      puts "   with destination: #{previous_rule.destination}\n           original: #{destination}" unless destination == previous_rule.destination
    end
  end
end

RedirectConfig.start(ARGV)
